name: CI/CD Pipeline

on:
  push:
    branches: [main, develop, "feature/*", "fix/*", "release/*", "hotfix/*"]
  pull_request:
    branches: [main, develop]
    types: [opened, synchronize, reopened]
  workflow_dispatch:
    inputs:
      environment:
        description: "Environment to deploy to"
        required: true
        default: "production"
        type: choice
        options:
          - production
          - staging

# Permissions needed for GitHub Actions to comment on PRs and create releases
permissions:
  contents: write # Needed for creating releases and pushing tags
  issues: write
  pull-requests: write
  deployments: write
  actions: read

env:
  NODE_VERSION: 20

jobs:
  # Quality checks for all branches and PRs
  quality-check:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.deploy-check.outputs.should-deploy }}
      target-env: ${{ steps.deploy-check.outputs.target-env }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Run linting
        run: npm run lint
        continue-on-error: false

      - name: Run type checking
        run: npx tsc --noEmit

      - name: Run security audit
        run: npm audit --audit-level moderate
        continue-on-error: true

      - name: Test build (production)
        if: github.base_ref == 'main' || github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/') || startsWith(github.ref, 'refs/heads/hotfix/')
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Test build (staging)
        if: github.base_ref == 'develop' || github.ref == 'refs/heads/develop' || startsWith(github.ref, 'refs/heads/feature/') || startsWith(github.ref, 'refs/heads/fix/')
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Check bundle size
        if: github.event_name == 'pull_request'
        run: |
          if [ -d "dist" ]; then
            echo "üì¶ Bundle size analysis:"
            du -sh dist/
            find dist -name "*.js" -type f -exec du -h {} \; | head -10
          fi

      - name: Security scan
        run: |
          echo "üîç Running security checks..."
          # Check for common security issues
          grep -r "console\.log" src/ worker/ && echo "‚ö†Ô∏è Found console.log statements" || echo "‚úÖ No console.log found"
          grep -r "alert(" src/ worker/ && echo "‚ö†Ô∏è Found alert() calls" || echo "‚úÖ No alert() calls found"
          grep -r "innerHTML" src/ worker/ && echo "‚ö†Ô∏è Found innerHTML usage" || echo "‚úÖ No innerHTML usage found"

      - name: Snyk Security Scan
        if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
        uses: snyk/actions/node@master
        continue-on-error: true
        with:
          args: --severity-threshold=high --json-file-output=snyk-report.json
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

      - name: Determine deployment
        id: deploy-check
        run: |
          should_deploy="false"
          target_env=""

          if [[ "${{ github.event_name }}" == "push" ]]; then
            if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
              should_deploy="true"
              target_env="production"
            elif [[ "${{ github.ref }}" == "refs/heads/develop" ]]; then
              should_deploy="true"
              target_env="staging"
            fi
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            should_deploy="true"
            target_env="${{ github.event.inputs.environment }}"
          fi

          echo "should-deploy=$should_deploy" >> $GITHUB_OUTPUT
          echo "target-env=$target_env" >> $GITHUB_OUTPUT
          echo "üöÄ Should deploy: $should_deploy to $target_env"

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        continue-on-error: true
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const targetEnv = '${{ github.base_ref }}' === 'main' ? 'Production' : 'Staging';

            const comment = `### ‚úÖ Quality Check Results
            - **Linting**: ‚úÖ Passed
            - **Type Checking**: ‚úÖ Passed
            - **Security Audit**: ‚úÖ Complete
            - **Build Test**: ‚úÖ Passed
            - **Target Environment**: ${targetEnv}

            Ready for review! üöÄ`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });

  # Staging deployment for develop, release/* branches
  deploy-staging:
    name: Deploy to Staging
    if: needs.quality-check.outputs.should-deploy == 'true' && needs.quality-check.outputs.target-env == 'staging'
    needs: quality-check
    runs-on: ubuntu-latest
    environment: staging
    concurrency:
      group: staging-deployment
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Build for staging
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Deploy to Cloudflare Workers (Staging)
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy --env staging

      - name: Run smoke tests
        run: |
          echo "Running smoke tests against staging..."
          sleep 30 # Wait for deployment to propagate

          # Basic health check
          staging_url="https://mvrv-2yr-rolling-staging.johannes-systems.workers.dev"
          response=$(curl -s -o /dev/null -w "%{http_code}" "$staging_url/api/mvrv-2yr")
          if [ "$response" != "200" ]; then
            echo "‚ùå Smoke test failed with status code: $response"
            exit 1
          fi
          echo "‚úÖ Smoke test passed with status code: $response"
        continue-on-error: true

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Successfully deployed to Staging environment"
            echo "üîó Staging URL: https://mvrv-2yr-rolling-staging.johannes-systems.workers.dev"
          else
            echo "‚ùå Staging deployment failed"
            exit 1
          fi

  # Production deployment for main, hotfix/* branches
  deploy-production:
    name: Deploy to Production
    if: needs.quality-check.outputs.should-deploy == 'true' && needs.quality-check.outputs.target-env == 'production'
    needs: quality-check
    runs-on: ubuntu-latest
    environment: production
    concurrency:
      group: production-deployment
      cancel-in-progress: false

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Install dependencies
        run: npm install

      - name: Create production deployment reference
        run: |
          echo "üìã Production deployment initiated"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref_name }}"
          echo "Time: $(date -u)"
        continue-on-error: true

      - name: Build for production
        run: npm run build
        env:
          NODE_OPTIONS: --max-old-space-size=4096

      - name: Deploy to Cloudflare Workers (Production)
        id: deploy
        uses: cloudflare/wrangler-action@v3
        with:
          apiToken: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          accountId: ${{ secrets.CLOUDFLARE_ACCOUNT_ID }}
          command: deploy

      - name: Health check
        id: health
        run: |
          echo "Running production health checks..."
          sleep 30 # Wait for deployment to propagate

          # Check if the API is responding
          prod_url="https://mvrv-2yr-rolling.johannes-systems.workers.dev"
          response=$(curl -s -o /dev/null -w "%{http_code}" "$prod_url/api/mvrv-2yr")
          if [ "$response" != "200" ]; then
            echo "‚ùå Health check failed with status code: $response"
            exit 1
          fi
          echo "‚úÖ Health check passed with status code: $response"

      - name: Create GitHub Release
        if: success() && (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/hotfix/'))
        run: |
          # Create release using GitHub CLI
          release_body=$(cat << 'EOF'
          ## üöÄ Production Deployment

          **Commit:** ${{ github.sha }}
          **Branch:** ${{ github.ref_name }}
          **Deployed at:** $(date -u)

          ### Changes
          ${{ github.event.head_commit.message }}
          EOF
          )

          # Create tag and release
          tag_name="v${{ github.run_number }}"
          release_name="Production Release ${{ github.run_number }}"

          if [[ "${{ github.ref }}" =~ ^refs/heads/hotfix/ ]]; then
            # Hotfix releases are prereleases
            gh release create "$tag_name" \
              --title "$release_name" \
              --notes "$release_body" \
              --prerelease \
              --target "${{ github.sha }}"
          else
            # Main branch releases are full releases
            gh release create "$tag_name" \
              --title "$release_name" \
              --notes "$release_body" \
              --target "${{ github.sha }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Rollback on failure
        if: failure() && steps.deploy.outcome == 'success'
        run: |
          echo "‚ö†Ô∏è Health check failed, deployment completed but health check failed"
          echo "Manual intervention may be required"

      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "‚úÖ Successfully deployed to Production"
            echo "üîó Live at: https://mvrv-2yr-rolling.johannes-systems.workers.dev"
            echo "üìä Release: v${{ github.run_number }}"
          else
            echo "‚ùå Production deployment failed"
            exit 1
          fi
